// src/components/Header/CategoryDropdown.jsx
import React from 'react';
import HeaderCategoryItem from './HeaderCategoryItem';
// Importar el CSS espec√≠fico de los dropdowns (solo estilos internos)
import '../../styles/HeaderDropdowns.css'; // Aseg√∫rate de que esta ruta sea correcta


// CategoryDropdown recibe categories, estado de carga/error, y las props de mouse del padre (Header.jsx)
// Tambi√©n recibe la prop className para la visibilidad controlada por el padre
const CategoryDropdown = ({ categories, loading, error, className, onMouseEnter, onMouseLeave }) => {
    // Mensajes de estado dentro del dropdown - Aseg√∫rate de que estos tambi√©n tengan las props de mouse y clase
    if (loading) return (
        <div className={`category-dropdown ${className || ''}`} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>
             {/* Div para el t√≠tulo/banner */}
             <div className="category-dropdown-header">
                <h3 className="category-dropdown-title">Cargando Categor√≠as...</h3>
             </div>
            <p>...</p>
        </div>
    );
    if (error) return (
        <div className={`category-dropdown ${className || ''}`} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>
             {/* Div para el t√≠tulo/banner */}
             <div className="category-dropdown-header">
                <h3 className="category-dropdown-title error-title">Error</h3> {/* Clase para estilo de error */}
             </div>
            <p className="error-message">Error al cargar categor√≠as.</p>
        </div>
    );
    // Si no hay categor√≠as, muestra un mensaje dentro del dropdown.
    if (!categories || categories.length === 0) return (
        <div className={`category-dropdown ${className || ''}`} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>
             {/* Div para el t√≠tulo/banner */}
             <div className="category-dropdown-header">
                <h3 className="category-dropdown-title">Categor√≠as</h3> {/* T√≠tulo incluso si vac√≠o */}
             </div>
             <p>No hay categor√≠as disponibles.</p>
        </div>
    );

    // Si hay categor√≠as, renderiza el contenido normal
    return (
        // Aplicar className, onMouseEnter, y onMouseLeave al div ra√≠z
        <div className={`category-dropdown ${className || ''}`} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>
            {/* NUEVO: Div para el t√≠tulo/banner dentro del dropdown */}
            {/* Puedes a√±adir estilos espec√≠ficos para este div en HeaderDropdowns.css */}
            <div className="category-dropdown-header">
                <h3 className="category-dropdown-title"> üå∑Categor√≠as:üå∑</h3> {/* El t√≠tulo que quieres */}
                {/* Opcional: A√±adir una peque√±a descripci√≥n o subt√≠tulo */}
                {/* <p className="category-dropdown-subtitle">Encuentra lo que buscas f√°cilmente.</p> */}
            </div>

            {/* Contenido de la cuadr√≠cula de categor√≠as */}
            <div className="category-list-grid"> 
                {categories.map(category => (
                    <HeaderCategoryItem key={category.id || category.slug} category={category} />
                ))}
            </div>
        </div>
    );
};

export default CategoryDropdown;